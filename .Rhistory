LT_guess = 5#  latent time in days
Q_guess = 0.1#  rate at which infectious people enter in quarantine
# lag = as.vector(t(recovered)) - dplyr::lag(as.vector(t(recovered)))
# lag2 = as.vector(t(deaths)) - dplyr::lag(as.vector(t(deaths)))
lambda_guess = c(0.01,0.001,10)
kappa_guess = c(0.001,0.001,10)
guess = c(alpha_guess,
beta_guess,
1/LT_guess,
Q_guess,
lambda_guess,
kappa_guess)
# Initial conditions
Q0 = confirmed[1]-recovered[1]-deaths[1]#
I0 = 0.3*Q0# % Initial number of infectious cases. Unknown but unlikely to be zero. yardım dosyasında açıkla
E0 = 0.3*Q0# % Initial number of exposed cases. Unknown but unlikely to be zero. yardım dosyasında açıkla
R0 = recovered[1]#
D0 = deaths[1]#
Active = confirmed-recovered-deaths
Active[Active<0] <- 0 # No negative number possible
Q=Active
R=recovered
D = deaths
time = seq(as.Date(start, format = "%m/%d/%y"), as.Date(finish, format = "%m/%d/%y"), by = "1 day")
## parameter estimations
params = fit_SEIQRDP(Q = Active, R = recovered, D = deaths, Npop = Npop, E0 = E0,I0 = I0,
time = time, dt = dt, guess = guess, ftol = 1e-6,
ptol = 1e-6, gtol = 1e-6, epsfcn = 0.001, factor = 100, maxfev = 1000,
maxiter = 100, nprint = 1, trace = T)
## SEIR results
res = SEIQRDP(alpha=params$alpha1, beta=params$beta1,
gamma=params$gamma1, delta=params$delta1,
lambda0=params$Lambda1, kappa0 = params$Kappa1,
Npop,E0,I0,Q0,R0,D0,lambdaFun=params$lambdaFun,
kappaFun=params$kappaFun,tstart = start, tfinish = finish,
dt = dt, f=f)
}
object=res
active=Active
recovered=recovered
deaths = deaths
preds = c("Q","R","D")
title = paste0(name[i], " (Reported time range: ", start, "-", finish, "). Future predictions: ",
f, " days." )
measure = "Vaccination"
measureDate = "01/13/21"
params=params
checkRates = FALSE
library(ggplot2)
########################
realTime = as.Date(object$realTime)
simTime = as.Date(object$simTime)
measureDate = as.Date(measureDate, format = "%m/%d/%y")
pred = cbind.data.frame(S = object$susceptible, E = object$exposed, I = object$infectious,
Q = object$quarantined, R = object$recovered, D = object$dead,
P = object$insusceptible)
actual = cbind.data.frame(active = as.numeric(active), recovered = as.numeric(recovered), deaths = as.numeric(deaths))
color_fitted <- c("red", "black", "blue")
color_filled = c("red", "black", "blue")
ggplot(pred) +
{if("R"%in%preds) geom_line(aes(y = R, x=simTime, color = "Recovered"))} +
{if("Q"%in%preds) geom_line(aes(y = Q, x=simTime, color="Active"))} +
{if("D"%in%preds) geom_line(aes(y = D, x=simTime, color="Deceased"))} +
{if("S"%in%preds) geom_line(aes(y = S, x=simTime, color="Susceptible"))} +
{if("E"%in%preds) geom_line(aes(y = E, x=simTime, color="Exposed"))} +
{if("I"%in%preds) geom_line(aes(y = I, x=simTime, color="Infectious"))} +
{if("P"%in%preds) geom_line(aes(y = P, x=simTime, color="Insusceptible"))} +
# scale_colour_manual(values=color_fitted) +
xlab("Time") + ylab("Cases")+ggtitle(title)+
{if("R"%in%preds) geom_point(data = actual,  aes(y = recovered, x = realTime, fill = "Recovered"), size=2, color = "blue", shape=21, stroke=0)}+
{if("Q"%in%preds)  geom_point(data = actual,  aes(y = active, x = realTime, fill = "Active"), size=2,color = "red", shape=21, stroke=0)} +
{if("D"%in%preds) geom_point(data = actual,  aes(y = deaths, x = realTime, fill = "Deceased"), size=2,color="black",shape=21, stroke=0)} +
geom_vline(xintercept=measureDate,
linetype=4, colour="black", show.legend = TRUE)+
# geom_text(aes(x=measureDate, label=measure, y=1000000), colour="blue", angle=90, text=element_text(size=11)) +
labs(fill="Reported", color="Fitted")
rm(list = ls())
library(genSEIR)
start = "10/01/20" ## mm/dd/yy # start date
finish = "02/24/21" ## mm/dd/yy # finish date
if(is.null(finish)){
finish = as.Date(Sys.Date())-1
}
dt=1/24 # oversample time to ensure that the algorithm converges
f=30 # future predictions (number of days)
name = "Germany"# country name
# get COVID-19 data from John-Hopkins University
data = getDataCOVID(start = start, finish = finish, country = name)
Recovered = data$tableRecovered
Deaths = data$tableDeaths
Confirmed = data$tableConfirmed
if(nrow(Recovered) == 1){
name = Recovered$CountryRegion
}else{
name = paste0(Recovered$ProvinceState, " (",Recovered$CountryRegion,")")
}
for(i  in 1:nrow(Recovered)){
recovered = Recovered[i,5:ncol(data$tableRecovered)]
deaths = Deaths[i,5:ncol(data$tableDeaths)]
confirmed = Confirmed[i,5:ncol(data$tableConfirmed)]
## define population
Npop = 3e+08
# Definition of the first estimates for the parameters
alpha_guess = 0.06 # protection rate
beta_guess = 1#  Infection rate
LT_guess = 5#  latent time in days
Q_guess = 0.1#  rate at which infectious people enter in quarantine
# lag = as.vector(t(recovered)) - dplyr::lag(as.vector(t(recovered)))
# lag2 = as.vector(t(deaths)) - dplyr::lag(as.vector(t(deaths)))
lambda_guess = c(0.01,0.001,10)
kappa_guess = c(0.001,0.001,10)
guess = c(alpha_guess,
beta_guess,
1/LT_guess,
Q_guess,
lambda_guess,
kappa_guess)
# Initial conditions
Q0 = confirmed[1]-recovered[1]-deaths[1]#
I0 = 0.3*Q0# % Initial number of infectious cases. Unknown but unlikely to be zero. yardım dosyasında açıkla
E0 = 0.3*Q0# % Initial number of exposed cases. Unknown but unlikely to be zero. yardım dosyasında açıkla
R0 = recovered[1]#
D0 = deaths[1]#
Active = confirmed-recovered-deaths
Active[Active<0] <- 0 # No negative number possible
Q=Active
R=recovered
D = deaths
time = seq(as.Date(start, format = "%m/%d/%y"), as.Date(finish, format = "%m/%d/%y"), by = "1 day")
## parameter estimations
params = fit_SEIQRDP(Q = Active, R = recovered, D = deaths, Npop = Npop, E0 = E0,I0 = I0,
time = time, dt = dt, guess = guess, ftol = 1e-6,
ptol = 1e-6, gtol = 1e-6, epsfcn = 0.001, factor = 100, maxfev = 1000,
maxiter = 100, nprint = 1, trace = T)
## SEIR results
res = SEIQRDP(alpha=params$alpha1, beta=params$beta1,
gamma=params$gamma1, delta=params$delta1,
lambda0=params$Lambda1, kappa0 = params$Kappa1,
Npop,E0,I0,Q0,R0,D0,lambdaFun=params$lambdaFun,
kappaFun=params$kappaFun,tstart = start, tfinish = finish,
dt = dt, f=f)
}
object=res
active=Active
recovered=recovered
deaths = deaths
preds = c("Q","R","D")
title = paste0(name[i], " (Reported time range: ", start, "-", finish, "). Future predictions: ",
f, " days." )
measure = "Vaccination"
measureDate = "01/13/21"
params=params
checkRates = FALSE
library(ggplot2)
########################
realTime = as.Date(object$realTime)
simTime = as.Date(object$simTime)
measureDate = as.Date(measureDate, format = "%m/%d/%y")
pred = cbind.data.frame(S = object$susceptible, E = object$exposed, I = object$infectious,
Q = object$quarantined, R = object$recovered, D = object$dead,
P = object$insusceptible)
actual = cbind.data.frame(active = as.numeric(active), recovered = as.numeric(recovered), deaths = as.numeric(deaths))
color_fitted <- c("red", "black", "blue")
color_filled = c("red", "black", "blue")
ggplot(pred) +
{if("R"%in%preds) geom_line(aes(y = R, x=simTime, color = "Recovered"))} +
{if("Q"%in%preds) geom_line(aes(y = Q, x=simTime, color="Active"))} +
{if("D"%in%preds) geom_line(aes(y = D, x=simTime, color="Deceased"))} +
{if("S"%in%preds) geom_line(aes(y = S, x=simTime, color="Susceptible"))} +
{if("E"%in%preds) geom_line(aes(y = E, x=simTime, color="Exposed"))} +
{if("I"%in%preds) geom_line(aes(y = I, x=simTime, color="Infectious"))} +
{if("P"%in%preds) geom_line(aes(y = P, x=simTime, color="Insusceptible"))} +
# scale_colour_manual(values=color_fitted) +
xlab("Time") + ylab("Cases")+ggtitle(title)+
{if("R"%in%preds) geom_point(data = actual,  aes(y = recovered, x = realTime, fill = "Recovered"), size=2, color = "blue", shape=21, stroke=0)}+
{if("Q"%in%preds)  geom_point(data = actual,  aes(y = active, x = realTime, fill = "Active"), size=2,color = "red", shape=21, stroke=0)} +
{if("D"%in%preds) geom_point(data = actual,  aes(y = deaths, x = realTime, fill = "Deceased"), size=2,color="black",shape=21, stroke=0)} +
geom_vline(xintercept=measureDate,
linetype=4, colour="black", show.legend = TRUE)+
# geom_text(aes(x=measureDate, label=measure, y=1000000), colour="blue", angle=90, text=element_text(size=11)) +
labs(fill="Reported", color="Fitted")
rm(list = ls())
library(genSEIR)
start = "10/01/20" ## mm/dd/yy # start date
finish = "02/24/21" ## mm/dd/yy # finish date
if(is.null(finish)){
finish = as.Date(Sys.Date())-1
}
dt=1/24 # oversample time to ensure that the algorithm converges
f=30 # future predictions (number of days)
name = "Germany"# country name
# get COVID-19 data from John-Hopkins University
data = getDataCOVID(start = start, finish = finish, country = name)
Recovered = data$tableRecovered
Deaths = data$tableDeaths
Confirmed = data$tableConfirmed
if(nrow(Recovered) == 1){
name = Recovered$CountryRegion
}else{
name = paste0(Recovered$ProvinceState, " (",Recovered$CountryRegion,")")
}
for(i  in 1:nrow(Recovered)){
recovered = Recovered[i,5:ncol(data$tableRecovered)]
deaths = Deaths[i,5:ncol(data$tableDeaths)]
confirmed = Confirmed[i,5:ncol(data$tableConfirmed)]
## define population
Npop = 3e+08
# Definition of the first estimates for the parameters
alpha_guess = 0.2 # protection rate
beta_guess = 1#  Infection rate
LT_guess = 2#  latent time in days
Q_guess = 0.3#  rate at which infectious people enter in quarantine
# lag = as.vector(t(recovered)) - dplyr::lag(as.vector(t(recovered)))
# lag2 = as.vector(t(deaths)) - dplyr::lag(as.vector(t(deaths)))
lambda_guess = c(0.01,0.001,10)
kappa_guess = c(0.001,0.001,10)
guess = c(alpha_guess,
beta_guess,
1/LT_guess,
Q_guess,
lambda_guess,
kappa_guess)
# Initial conditions
Q0 = confirmed[1]-recovered[1]-deaths[1]#
I0 = 0.3*Q0# % Initial number of infectious cases. Unknown but unlikely to be zero. yardım dosyasında açıkla
E0 = 0.3*Q0# % Initial number of exposed cases. Unknown but unlikely to be zero. yardım dosyasında açıkla
R0 = recovered[1]#
D0 = deaths[1]#
Active = confirmed-recovered-deaths
Active[Active<0] <- 0 # No negative number possible
Q=Active
R=recovered
D = deaths
time = seq(as.Date(start, format = "%m/%d/%y"), as.Date(finish, format = "%m/%d/%y"), by = "1 day")
## parameter estimations
params = fit_SEIQRDP(Q = Active, R = recovered, D = deaths, Npop = Npop, E0 = E0,I0 = I0,
time = time, dt = dt, guess = guess, ftol = 1e-6,
ptol = 1e-6, gtol = 1e-6, epsfcn = 0.001, factor = 100, maxfev = 1000,
maxiter = 100, nprint = 1, trace = T)
## SEIR results
res = SEIQRDP(alpha=params$alpha1, beta=params$beta1,
gamma=params$gamma1, delta=params$delta1,
lambda0=params$Lambda1, kappa0 = params$Kappa1,
Npop,E0,I0,Q0,R0,D0,lambdaFun=params$lambdaFun,
kappaFun=params$kappaFun,tstart = start, tfinish = finish,
dt = dt, f=f)
}
object=res
active=Active
recovered=recovered
deaths = deaths
preds = c("Q","R","D")
title = paste0(name[i], " (Reported time range: ", start, "-", finish, "). Future predictions: ",
f, " days." )
measure = "Vaccination"
measureDate = "01/13/21"
params=params
checkRates = FALSE
library(ggplot2)
########################
realTime = as.Date(object$realTime)
simTime = as.Date(object$simTime)
measureDate = as.Date(measureDate, format = "%m/%d/%y")
pred = cbind.data.frame(S = object$susceptible, E = object$exposed, I = object$infectious,
Q = object$quarantined, R = object$recovered, D = object$dead,
P = object$insusceptible)
actual = cbind.data.frame(active = as.numeric(active), recovered = as.numeric(recovered), deaths = as.numeric(deaths))
color_fitted <- c("red", "black", "blue")
color_filled = c("red", "black", "blue")
ggplot(pred) +
{if("R"%in%preds) geom_line(aes(y = R, x=simTime, color = "Recovered"))} +
{if("Q"%in%preds) geom_line(aes(y = Q, x=simTime, color="Active"))} +
{if("D"%in%preds) geom_line(aes(y = D, x=simTime, color="Deceased"))} +
{if("S"%in%preds) geom_line(aes(y = S, x=simTime, color="Susceptible"))} +
{if("E"%in%preds) geom_line(aes(y = E, x=simTime, color="Exposed"))} +
{if("I"%in%preds) geom_line(aes(y = I, x=simTime, color="Infectious"))} +
{if("P"%in%preds) geom_line(aes(y = P, x=simTime, color="Insusceptible"))} +
# scale_colour_manual(values=color_fitted) +
xlab("Time") + ylab("Cases")+ggtitle(title)+
{if("R"%in%preds) geom_point(data = actual,  aes(y = recovered, x = realTime, fill = "Recovered"), size=2, color = "blue", shape=21, stroke=0)}+
{if("Q"%in%preds)  geom_point(data = actual,  aes(y = active, x = realTime, fill = "Active"), size=2,color = "red", shape=21, stroke=0)} +
{if("D"%in%preds) geom_point(data = actual,  aes(y = deaths, x = realTime, fill = "Deceased"), size=2,color="black",shape=21, stroke=0)} +
geom_vline(xintercept=measureDate,
linetype=4, colour="black", show.legend = TRUE)+
# geom_text(aes(x=measureDate, label=measure, y=1000000), colour="blue", angle=90, text=element_text(size=11)) +
labs(fill="Reported", color="Fitted")
preds="Q"
ggplot(pred) +
{if("R"%in%preds) geom_line(aes(y = R, x=simTime, color = "Recovered"))} +
{if("Q"%in%preds) geom_line(aes(y = Q, x=simTime, color="Active"))} +
{if("D"%in%preds) geom_line(aes(y = D, x=simTime, color="Deceased"))} +
{if("S"%in%preds) geom_line(aes(y = S, x=simTime, color="Susceptible"))} +
{if("E"%in%preds) geom_line(aes(y = E, x=simTime, color="Exposed"))} +
{if("I"%in%preds) geom_line(aes(y = I, x=simTime, color="Infectious"))} +
{if("P"%in%preds) geom_line(aes(y = P, x=simTime, color="Insusceptible"))} +
# scale_colour_manual(values=color_fitted) +
xlab("Time") + ylab("Cases")+ggtitle(title)+
{if("R"%in%preds) geom_point(data = actual,  aes(y = recovered, x = realTime, fill = "Recovered"), size=2, color = "blue", shape=21, stroke=0)}+
{if("Q"%in%preds)  geom_point(data = actual,  aes(y = active, x = realTime, fill = "Active"), size=2,color = "red", shape=21, stroke=0)} +
{if("D"%in%preds) geom_point(data = actual,  aes(y = deaths, x = realTime, fill = "Deceased"), size=2,color="black",shape=21, stroke=0)} +
geom_vline(xintercept=measureDate,
linetype=4, colour="black", show.legend = TRUE)+
# geom_text(aes(x=measureDate, label=measure, y=1000000), colour="blue", angle=90, text=element_text(size=11)) +
labs(fill="Reported", color="Fitted")
preds="R"
ggplot(pred) +
{if("R"%in%preds) geom_line(aes(y = R, x=simTime, color = "Recovered"))} +
{if("Q"%in%preds) geom_line(aes(y = Q, x=simTime, color="Active"))} +
{if("D"%in%preds) geom_line(aes(y = D, x=simTime, color="Deceased"))} +
{if("S"%in%preds) geom_line(aes(y = S, x=simTime, color="Susceptible"))} +
{if("E"%in%preds) geom_line(aes(y = E, x=simTime, color="Exposed"))} +
{if("I"%in%preds) geom_line(aes(y = I, x=simTime, color="Infectious"))} +
{if("P"%in%preds) geom_line(aes(y = P, x=simTime, color="Insusceptible"))} +
# scale_colour_manual(values=color_fitted) +
xlab("Time") + ylab("Cases")+ggtitle(title)+
{if("R"%in%preds) geom_point(data = actual,  aes(y = recovered, x = realTime, fill = "Recovered"), size=2, color = "blue", shape=21, stroke=0)}+
{if("Q"%in%preds)  geom_point(data = actual,  aes(y = active, x = realTime, fill = "Active"), size=2,color = "red", shape=21, stroke=0)} +
{if("D"%in%preds) geom_point(data = actual,  aes(y = deaths, x = realTime, fill = "Deceased"), size=2,color="black",shape=21, stroke=0)} +
geom_vline(xintercept=measureDate,
linetype=4, colour="black", show.legend = TRUE)+
# geom_text(aes(x=measureDate, label=measure, y=1000000), colour="blue", angle=90, text=element_text(size=11)) +
labs(fill="Reported", color="Fitted")
preds="D"
ggplot(pred) +
{if("R"%in%preds) geom_line(aes(y = R, x=simTime, color = "Recovered"))} +
{if("Q"%in%preds) geom_line(aes(y = Q, x=simTime, color="Active"))} +
{if("D"%in%preds) geom_line(aes(y = D, x=simTime, color="Deceased"))} +
{if("S"%in%preds) geom_line(aes(y = S, x=simTime, color="Susceptible"))} +
{if("E"%in%preds) geom_line(aes(y = E, x=simTime, color="Exposed"))} +
{if("I"%in%preds) geom_line(aes(y = I, x=simTime, color="Infectious"))} +
{if("P"%in%preds) geom_line(aes(y = P, x=simTime, color="Insusceptible"))} +
# scale_colour_manual(values=color_fitted) +
xlab("Time") + ylab("Cases")+ggtitle(title)+
{if("R"%in%preds) geom_point(data = actual,  aes(y = recovered, x = realTime, fill = "Recovered"), size=2, color = "blue", shape=21, stroke=0)}+
{if("Q"%in%preds)  geom_point(data = actual,  aes(y = active, x = realTime, fill = "Active"), size=2,color = "red", shape=21, stroke=0)} +
{if("D"%in%preds) geom_point(data = actual,  aes(y = deaths, x = realTime, fill = "Deceased"), size=2,color="black",shape=21, stroke=0)} +
geom_vline(xintercept=measureDate,
linetype=4, colour="black", show.legend = TRUE)+
# geom_text(aes(x=measureDate, label=measure, y=1000000), colour="blue", angle=90, text=element_text(size=11)) +
labs(fill="Reported", color="Fitted")
rm(list = ls())
library(genSEIR)
start = "10/01/20" ## mm/dd/yy # start date
finish = "02/24/21" ## mm/dd/yy # finish date
if(is.null(finish)){
finish = as.Date(Sys.Date())-1
}
dt=1/24 # oversample time to ensure that the algorithm converges
f=30 # future predictions (number of days)
name = "Italy"# country name
# get COVID-19 data from John-Hopkins University
data = getDataCOVID(start = start, finish = finish, country = name)
Recovered = data$tableRecovered
Deaths = data$tableDeaths
Confirmed = data$tableConfirmed
if(nrow(Recovered) == 1){
name = Recovered$CountryRegion
}else{
name = paste0(Recovered$ProvinceState, " (",Recovered$CountryRegion,")")
}
for(i  in 1:nrow(Recovered)){
recovered = Recovered[i,5:ncol(data$tableRecovered)]
deaths = Deaths[i,5:ncol(data$tableDeaths)]
confirmed = Confirmed[i,5:ncol(data$tableConfirmed)]
## define population
Npop = 66000000
# Definition of the first estimates for the parameters
alpha_guess = 0.2 # protection rate
beta_guess = 1#  Infection rate
LT_guess = 2#  latent time in days
Q_guess = 0.3#  rate at which infectious people enter in quarantine
# lag = as.vector(t(recovered)) - dplyr::lag(as.vector(t(recovered)))
# lag2 = as.vector(t(deaths)) - dplyr::lag(as.vector(t(deaths)))
lambda_guess = c(0.01,0.001,10)
kappa_guess = c(0.001,0.001,10)
guess = c(alpha_guess,
beta_guess,
1/LT_guess,
Q_guess,
lambda_guess,
kappa_guess)
# Initial conditions
Q0 = confirmed[1]-recovered[1]-deaths[1]#
I0 = 0.3*Q0# % Initial number of infectious cases. Unknown but unlikely to be zero. yardım dosyasında açıkla
E0 = 0.3*Q0# % Initial number of exposed cases. Unknown but unlikely to be zero. yardım dosyasında açıkla
R0 = recovered[1]#
D0 = deaths[1]#
Active = confirmed-recovered-deaths
Active[Active<0] <- 0 # No negative number possible
Q=Active
R=recovered
D = deaths
time = seq(as.Date(start, format = "%m/%d/%y"), as.Date(finish, format = "%m/%d/%y"), by = "1 day")
## parameter estimations
params = fit_SEIQRDP(Q = Active, R = recovered, D = deaths, Npop = Npop, E0 = E0,I0 = I0,
time = time, dt = dt, guess = guess, ftol = 1e-6,
ptol = 1e-6, gtol = 1e-6, epsfcn = 0.001, factor = 100, maxfev = 1000,
maxiter = 100, nprint = 1, trace = T)
## SEIR results
res = SEIQRDP(alpha=params$alpha1, beta=params$beta1,
gamma=params$gamma1, delta=params$delta1,
lambda0=params$Lambda1, kappa0 = params$Kappa1,
Npop,E0,I0,Q0,R0,D0,lambdaFun=params$lambdaFun,
kappaFun=params$kappaFun,tstart = start, tfinish = finish,
dt = dt, f=f)
}
object=res
active=Active
recovered=recovered
deaths = deaths
preds = c("Q","R","D")
title = paste0(name[i], " (Reported time range: ", start, "-", finish, "). Future predictions: ",
f, " days." )
measure = "Vaccination"
measureDate = "01/13/21"
params=params
checkRates = FALSE
library(ggplot2)
########################
realTime = as.Date(object$realTime)
simTime = as.Date(object$simTime)
measureDate = as.Date(measureDate, format = "%m/%d/%y")
pred = cbind.data.frame(S = object$susceptible, E = object$exposed, I = object$infectious,
Q = object$quarantined, R = object$recovered, D = object$dead,
P = object$insusceptible)
actual = cbind.data.frame(active = as.numeric(active), recovered = as.numeric(recovered), deaths = as.numeric(deaths))
color_fitted <- c("red", "black", "blue")
color_filled = c("red", "black", "blue")
ggplot(pred) +
{if("R"%in%preds) geom_line(aes(y = R, x=simTime, color = "Recovered"))} +
{if("Q"%in%preds) geom_line(aes(y = Q, x=simTime, color="Active"))} +
{if("D"%in%preds) geom_line(aes(y = D, x=simTime, color="Deceased"))} +
{if("S"%in%preds) geom_line(aes(y = S, x=simTime, color="Susceptible"))} +
{if("E"%in%preds) geom_line(aes(y = E, x=simTime, color="Exposed"))} +
{if("I"%in%preds) geom_line(aes(y = I, x=simTime, color="Infectious"))} +
{if("P"%in%preds) geom_line(aes(y = P, x=simTime, color="Insusceptible"))} +
# scale_colour_manual(values=color_fitted) +
xlab("Time") + ylab("Cases")+ggtitle(title)+
{if("R"%in%preds) geom_point(data = actual,  aes(y = recovered, x = realTime, fill = "Recovered"), size=2, color = "blue", shape=21, stroke=0)}+
{if("Q"%in%preds)  geom_point(data = actual,  aes(y = active, x = realTime, fill = "Active"), size=2,color = "red", shape=21, stroke=0)} +
{if("D"%in%preds) geom_point(data = actual,  aes(y = deaths, x = realTime, fill = "Deceased"), size=2,color="black",shape=21, stroke=0)} +
geom_vline(xintercept=measureDate,
linetype=4, colour="black", show.legend = TRUE)+
# geom_text(aes(x=measureDate, label=measure, y=1000000), colour="blue", angle=90, text=element_text(size=11)) +
labs(fill="Reported", color="Fitted")
roxygen2::roxygenise()
rm(list = ls())
roxygen2::roxygenise()
roxygen2::roxygenise()
library(genSEIR)
library(genSEIR)
roxygen2::roxygenise()
library(genSEIR)
library(genSEIR)
roxygen2::roxygenise()
library(genSEIR)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(genSEIR)
?plotSEIQRDP
roxygen2::roxygenise()
library(genSEIR)
roxygen2::roxygenise()
library(genSEIR)
roxygen2::roxygenise()
library(genSEIR)
roxygen2::roxygenise()
library(genSEIR)
roxygen2::roxygenise()
library(genSEIR)
?genSEIR::checkRates
roxygen2::roxygenise()
library(genSEIR)
?genSEIR::checkRates
?genSEIR::getA
library(genSEIR)
library(genSEIR)
roxygen2::roxygenise()
library(genSEIR)
40/9
45/9
55/7
55/7
7*8
44/9
5*9
7*8
5*9
56+45
40/9
40/8
60/7
60/6
40/7
40/6
40/5
60/6
100/16
?genSEIR::checkRates
?checkRates
library(genSEIR)
54+27+10
56+18+10
roxygen2::roxygenise()
?nlsr::nlxb
roxygen2::roxygenise()
roxygen2::roxygenise()
remove.packages("nlsr")
installed.packages("nlsr")
install.packages("nlsr")
install.packages("nlsr")
roxygen2::roxygenise()
