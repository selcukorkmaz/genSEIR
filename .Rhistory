# %   I0: datetime [1x1]: Initial number of infectious cases
# %
# % Outputs
# %   Q: double [1xN1]: Time histories of the quarantined/active cases
# %   D: double [1xN1]: Time histories of the deceased cases
# %   R: double [1xN1]: Time histories of the recovered cases
# %   T: datetime: [1xN1]: time array
# %
# % Author: E. Cheynet - UiB - last modified: 07-05-2020
# %
# % see also SEIQRDP.m fit_SEIQRDP.m
# %% varargin
tStart1 = as.Date(tStart1, format = "%m/%d/%y")
tStart2 = as.Date(tStart2, format = "%m/%d/%y")
tEnd = as.Date(tEnd, format = "%m/%d/%y")
Confirmed = Confirmed[time>=tStart1]
Recovered = Recovered[time>=tStart1]
Deaths = Deaths[time>=tStart1]
time = time[time>=tStart1]
Active = Confirmed-Recovered-Deaths;
Active[Active<0] = 0; #% No negative number possible
# %% Inputparseer
# p = inputParser();
# p.CaseSensitive = false;
# p.addOptional('Q0',Active(1));
# p.addOptional('E0',0.3*Active(1));
# p.addOptional('I0',5*Active(1));
# p.parse(varargin{:});
# %%%%%%%%%%%%%%%%%%%%%%%%%%
Q0 = Active[1] # initial number of active cases
E0 = 0.3*Active[1] #  Initial number of exposed cases. Unknown but unlikely to be zero.
I0 = 5*Active[1] # % Initial number of infectious cases. Unknown but unlikely to be zero.
# %  Time for first wave
indT1 = which(time>=tStart1 & time<tStart2)
# % Time for  second wave
indT2 = which(time>=tStart2);
# %% Simulate first wave
# % Initial conditions
R0 = Recovered[indT1[1]];
D0 = Deaths[indT1[1]];
wave1 = computeWave(Active[indT1],Recovered[indT1],
Deaths[indT1],E0,I0,Q0,R0,D0,time[indT1],
tStart1,tStart2,guess);
E1=wave1$E
I1=wave1$I
Q1=wave1$Q
R1=wave1$R
D1=wave1$D
T1=wave1$newT
# %% Simulate second wave
E0 = E1[length(E1)]
I0 = I1[length(I1)]
Q0 = Q1[length(Q1)]
R0 = R1[length(R1)]
D0 = D1[length(D1)]
wave2 = computeWave(Active[indT2],Recovered[indT2],
Deaths[indT2],E0,I0,Q0,R0,D0,time[indT2],
tStart2,tEnd,guess)
Q2 = wave2$Q
R2 = wave2$R
D2 = wave2$D
T2 = wave2$newT
# %% Concatenate outputs
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
# %% Check RMSE and refit with different I0 if needed
ind = which(!T %in% T[duplicated(T)])
time2 = seq(as.Date(tStart1,format = "%m/%d/%y"),as.Date(tEnd,format = "%m/%d/%y")-1, dt)
newQ = approx(T[ind], Q[ind], time2)$y
r = cbind(Active[!is.na(newQ)], newQ[!is.na(newQ)])
r2 = r[complete.cases(r),]
rmse = rmse(r2[,1],r2[,2])
if(rmse <1e5){
print('Fitting succeded. Check the initial value of E0 and I0 \n');
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
return(list(Q=Q,R=R,D=D,T=T))
}
newI0 = seq(1,10,2)*Active[1];
count = 1;
while (rmse>1e5){
R0 = Recovered[indT1[1]]
D0 = Deaths[indT1[1]]
wave3 = computeWave(Active[indT1],Recovered[indT1],Deaths[indT1],E0,newI0[count],Q0,R0,D0,
time[indT1],tStart1,tStart2,guess)
E1 = wave3$E
I1 = wave3$I
Q1 = wave3$Q
R1 = wave3$R
D1 = wave3$D
T1 = wave3$newT
# % Simulate second wave
E0 = E1[length(E1)];
I0 = I1[length(I1)];
Q0 = Q1[length(Q1)];
R0 = R1[length(R1)];
D0 = D1[length(D1)];
wave4 = computeWave(Active[indT2],Recovered[indT2],
Deaths[indT2],E0,I0,Q0,R0,D0,time[indT2],tStart2,tEnd,guess);
Q2 = wave4$Q
R2 = wave4$R
D2 = wave4$D
T2 = wave4$newT
# % Concatenate outputs
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
count = count+1
ind = which(!T %in% T[duplicated(T)])
newQ = approx(T[ind],Q[ind],time2)$y
r = cbind(Active[!is.na(newQ)], newQ[!is.na(newQ)])
r2 = r[complete.cases(r),]
rmse = rmse(r2[,1],r2[,2])
if (rmse <1e5){
print('Fitting succeded. Check the initial value of E0 and I0 \n');
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
return(list(Q=Q,R=R,D=D,T=T))
}
if(count >=length(newI0)){
warning('Fitting failed. Check the initial value of E0 and I0');
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
return(list(Q=Q,R=R,D=D,T=T))
}
}
# plot(time2,newQ)
# plot(time,Active)
# # %% Nested functions
}
res = getMultipleWaves (guess, Npop, time, Confirmed, Recovered,
Deaths, tStart1, tStart2, tEnd)
rm(list = ls())
tStart1 = as.Date("03/15/20",format = "%m/%d/%y")
tStart2 = as.Date("09/15/20",format = "%m/%d/%y")
tEnd = as.Date("03/01/21",format = "%m/%d/%y")
dt = 1/24
name = "Italy"# country name
time = seq(as.Date("01/22/20",format = "%m/%d/%y"),as.Date("02/28/21",format = "%m/%d/%y"), 1)
length(time)
data = getDataCOVID(start = NULL, finish = NULL, country = name)
Recovered = data$tableRecovered[,5:ncol(data$tableRecovered)]
Deaths = data$tableDeaths[,5:ncol(data$tableDeaths)]
Confirmed = data$tableConfirmed[,5:ncol(data$tableConfirmed)]
Confirmed = as.numeric(Confirmed)
Recovered = as.numeric(Recovered)
Deaths = as.numeric(Deaths)
indT = which(time>=tStart1 & time <=tEnd);
Recovered=Recovered[indT];
Deaths = Deaths[indT];
time = time[indT];
Confirmed = Confirmed[indT];
Active = Confirmed-Recovered-Deaths;
Active[Active<0] = 0# % No negative number possible
## define population
Npop = 66000000
# Definition of the first estimates for the parameters
alpha_guess = 0.06 # % protection rate
beta_guess = 0.9# % Infection rate
LT_guess = 5# % latent time in days
Q_guess = 0.1# % rate at which infectious people enter in quarantine
lambda_guess = c(0.1,0.1,20)# % recovery rate
kappa_guess = c(0.005,0.005,10)# % death rate
guess = c(alpha_guess,
beta_guess,
1/LT_guess,
Q_guess,
lambda_guess,
kappa_guess)
computeWave <- function(Active,Recovered,Deaths,E0,I0,Q0,R0,D0,time,tStart,tEnd,guess){
tStart=as.Date(tStart, format = "%m/%d/%y")
tEnd=as.Date(tEnd, format = "%m/%d/%y")
## parameter estimations
params = fit_SEIQRDP(Active, Recovered, Deaths, Npop, E0, I0,
time, guess, ftol = 1e-6,
ptol = 1e-6, gtol = 1e-6, epsfcn = 0.001, factor = 100, maxfev = 1000,
maxiter = 100, nprint = 1, trace = FALSE)
## SEIR results
newT = seq(tStart, tEnd, dt)
N = length(newT);
t = 0:(N-1)*dt;
res = SEIQRDP(alpha=params$alpha1, beta=params$beta1,
gamma=params$gamma1, delta=params$delta1,
lambda0=params$Lambda1, kappa0 = params$Kappa1,
Npop,E0,I0,Q0,R0,D0,lambdaFun=params$lambdaFun,
kappaFun=params$kappaFun,tstart = tStart, tfinish = tEnd,
dt = dt, f=0)
return(list(E = res$exposed, I = res$infectious, Q=res$quarantined, R=res$recovered,
D = res$dead, newT=newT))
}
getMultipleWaves <- function(guess, Npop, time, Confirmed, Recovered,
Deaths, tStart1, tStart2, tEnd, ...){
# % [Q,R,D,T] =
#   % getMultipleWaves(guess,Npop,time,Confirmed,Recovered,Deaths,tStart1,tStart2,tEnd)
# % simulate the number of recovered, deaths and active cases for the
# % situation were two epidemic waves occur
# %
# % Inputs:
#   %   guess:  double [1x10]: Initial guess for the fitting algorithm
# %   Npop:  double [1x1]: Population
# %   time: datetime: [1xN]: time array
# %   Confirmed: double [1xN]: Time histories of the confirmed cases (Active+recovered+deaths)
# %   Deaths: double [1xN]: Time histories of the deceased cases
# %   Recovered: double [1xN]: Time histories of the recovered cases
# %   tStart1: datetime [1x1]: Initial time for the first wave
# %   tStart2: datetime [1x1]: Initial time for the second wave
# %   tEnd: datetime [1x1]: Final time for the simulation
# %   Q0: datetime [1x1]: Initial number of quarantined cases
# %   E0: datetime [1x1]: Initial number of exposed cases
# %   I0: datetime [1x1]: Initial number of infectious cases
# %
# % Outputs
# %   Q: double [1xN1]: Time histories of the quarantined/active cases
# %   D: double [1xN1]: Time histories of the deceased cases
# %   R: double [1xN1]: Time histories of the recovered cases
# %   T: datetime: [1xN1]: time array
# %
# % Author: E. Cheynet - UiB - last modified: 07-05-2020
# %
# % see also SEIQRDP.m fit_SEIQRDP.m
# %% varargin
tStart1 = as.Date(tStart1, format = "%m/%d/%y")
tStart2 = as.Date(tStart2, format = "%m/%d/%y")
tEnd = as.Date(tEnd, format = "%m/%d/%y")
Confirmed = Confirmed[time>=tStart1]
Recovered = Recovered[time>=tStart1]
Deaths = Deaths[time>=tStart1]
time = time[time>=tStart1]
Active = Confirmed-Recovered-Deaths;
Active[Active<0] = 0; #% No negative number possible
# %% Inputparseer
# p = inputParser();
# p.CaseSensitive = false;
# p.addOptional('Q0',Active(1));
# p.addOptional('E0',0.3*Active(1));
# p.addOptional('I0',5*Active(1));
# p.parse(varargin{:});
# %%%%%%%%%%%%%%%%%%%%%%%%%%
Q0 = Active[1] # initial number of active cases
E0 = 0.3*Active[1] #  Initial number of exposed cases. Unknown but unlikely to be zero.
I0 = 5*Active[1] # % Initial number of infectious cases. Unknown but unlikely to be zero.
# %  Time for first wave
indT1 = which(time>=tStart1 & time<tStart2)
# % Time for  second wave
indT2 = which(time>=tStart2);
# %% Simulate first wave
# % Initial conditions
R0 = Recovered[indT1[1]];
D0 = Deaths[indT1[1]];
wave1 = computeWave(Active[indT1],Recovered[indT1],
Deaths[indT1],E0,I0,Q0,R0,D0,time[indT1],
tStart1,tStart2,guess);
E1=wave1$E
I1=wave1$I
Q1=wave1$Q
R1=wave1$R
D1=wave1$D
T1=wave1$newT
# %% Simulate second wave
E0 = E1[length(E1)]
I0 = I1[length(I1)]
Q0 = Q1[length(Q1)]
R0 = R1[length(R1)]
D0 = D1[length(D1)]
wave2 = computeWave(Active[indT2],Recovered[indT2],
Deaths[indT2],E0,I0,Q0,R0,D0,time[indT2],
tStart2,tEnd,guess)
Q2 = wave2$Q
R2 = wave2$R
D2 = wave2$D
T2 = wave2$newT
# %% Concatenate outputs
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
# %% Check RMSE and refit with different I0 if needed
ind = which(!T %in% T[duplicated(T)])
time2 = seq(as.Date(tStart1,format = "%m/%d/%y"),as.Date(tEnd,format = "%m/%d/%y")-1, dt)
newQ = approx(T[ind], Q[ind], time2)$y
r = cbind(Active[!is.na(newQ)], newQ[!is.na(newQ)])
r2 = r[complete.cases(r),]
rmse = rmse(r2[,1],r2[,2])
if(rmse <1e5){
print('Fitting succeded. Check the initial value of E0 and I0 \n');
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
return(list(Q=Q,R=R,D=D,T=T))
}
newI0 = seq(1,10,2)*Active[1];
count = 1;
while (rmse>1e5){
R0 = Recovered[indT1[1]]
D0 = Deaths[indT1[1]]
wave3 = computeWave(Active[indT1],Recovered[indT1],Deaths[indT1],E0,newI0[count],Q0,R0,D0,
time[indT1],tStart1,tStart2,guess)
E1 = wave3$E
I1 = wave3$I
Q1 = wave3$Q
R1 = wave3$R
D1 = wave3$D
T1 = wave3$newT
# % Simulate second wave
E0 = E1[length(E1)];
I0 = I1[length(I1)];
Q0 = Q1[length(Q1)];
R0 = R1[length(R1)];
D0 = D1[length(D1)];
wave4 = computeWave(Active[indT2],Recovered[indT2],
Deaths[indT2],E0,I0,Q0,R0,D0,time[indT2],tStart2,tEnd,guess);
Q2 = wave4$Q
R2 = wave4$R
D2 = wave4$D
T2 = wave4$newT
# % Concatenate outputs
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
count = count+1
ind = which(!T %in% T[duplicated(T)])
newQ = approx(T[ind],Q[ind],time2)$y
r = cbind(Active[!is.na(newQ)], newQ[!is.na(newQ)])
r2 = r[complete.cases(r),]
rmse = rmse(r2[,1],r2[,2])
if (rmse <1e5){
print('Fitting succeded. Check the initial value of E0 and I0 \n');
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
return(list(Q=Q,R=R,D=D,T=T))
}
if(count >=length(newI0)){
warning('Fitting failed. Check the initial value of E0 and I0');
Q = c(Q1,Q2)
R = c(R1,R2)
D = c(D1,D2)
T= c(T1,T2)
return(list(Q=Q,R=R,D=D,T=T))
}
}
# plot(time2,newQ)
# plot(time,Active)
# # %% Nested functions
}
res = getMultipleWaves (guess, Npop, time, Confirmed, Recovered,
Deaths, tStart1, tStart2, tEnd)
rm(list = ls())
library(genSEIR)
start = "09/01/20" ## mm/dd/yy # start date
finish = "03/15/21" ## mm/dd/yy # finish date
dt=1 # oversample time to ensure that the algorithm converges
f=40 # future predictions (number of days)
name = "Italy"# country name
# get COVID-19 data from John-Hopkins University
data = getDataCOVID(start = start, finish = finish, country = name)
Recovered = data$tableRecovered
Deaths = data$tableDeaths
Confirmed = data$tableConfirmed
if(nrow(Recovered) == 1){
name = Recovered$CountryRegion
}else{
name = paste0(Recovered$ProvinceState, " (",Recovered$CountryRegion,")")
}
for(i  in 1:nrow(Recovered)){
recovered = Recovered[i,5:ncol(data$tableRecovered)]
deaths = Deaths[i,5:ncol(data$tableDeaths)]
confirmed = Confirmed[i,5:ncol(data$tableConfirmed)]
## define population
Npop = 66000000
# Definition of the first estimates for the parameters
alpha_guess = 0.08 # % protection rate
beta_guess = 1# % Infection rate
LT_guess = 5# % latent time in days
Q_guess = 0.1# % rate at which infectious people enter in quarantine
lambda_guess = c(0.01,0.001,10)# % recovery rate
kappa_guess = c(0.001,0.001,10)# % death rate
guess = c(alpha_guess,
beta_guess,
1/LT_guess,
Q_guess,
lambda_guess,
kappa_guess)
# Initial conditions
Q0 = confirmed[1]-recovered[1]-deaths[1]#
I0 = 0.3*Q0# % Initial number of infectious cases. Unknown but unlikely to be zero.
E0 = 0.3*Q0# % Initial number of exposed cases. Unknown but unlikely to be zero.
R0 = recovered[1]#
D0 = deaths[1]#
Active = confirmed-recovered-deaths
Active[Active<0] <- 0 # No negative number possible
Q=Active
R=recovered
D = deaths
time = seq(as.Date(start, format = "%m/%d/%y"), as.Date(finish, format = "%m/%d/%y"), by = "1 day")
## parameter estimations
params = fit_SEIQRDP(Q = Active, R = recovered, D = deaths,Npop = Npop, E0 = E0,I0 = I0,
time = time, guess = guess, ftol = 1e-6,
ptol = 1e-6, gtol = 1e-6, epsfcn = 0.001, factor = 100, maxfev = 1000,
maxiter = 100, nprint = 1, trace = T)
## SEIR results
res = SEIQRDP(alpha=params$alpha1, beta=params$beta1,
gamma=params$gamma1, delta=params$delta1,
lambda0=params$Lambda1, kappa0 = params$Kappa1,
Npop,E0,I0,Q0,R0,D0,lambdaFun=params$lambdaFun,
kappaFun=params$kappaFun,tstart = start, tfinish = finish,
dt = dt, f=f)
## SEIR plot
p = plotSEIQRDP(res, Active, recovered, deaths, name[i], params, checkRates = T)
print(p)
}
rm(list = ls())
library(genSEIR)
start = "09/01/20" ## mm/dd/yy # start date
finish = "03/15/21" ## mm/dd/yy # finish date
dt=1 # oversample time to ensure that the algorithm converges
f=40 # future predictions (number of days)
name = "Turkey"# country name
# get COVID-19 data from John-Hopkins University
data = getDataCOVID(start = start, finish = finish, country = name)
Recovered = data$tableRecovered
Deaths = data$tableDeaths
Confirmed = data$tableConfirmed
if(nrow(Recovered) == 1){
name = Recovered$CountryRegion
}else{
name = paste0(Recovered$ProvinceState, " (",Recovered$CountryRegion,")")
}
for(i  in 1:nrow(Recovered)){
recovered = Recovered[i,5:ncol(data$tableRecovered)]
deaths = Deaths[i,5:ncol(data$tableDeaths)]
confirmed = Confirmed[i,5:ncol(data$tableConfirmed)]
## define population
Npop = 66000000
# Definition of the first estimates for the parameters
alpha_guess = 0.08 # % protection rate
beta_guess = 1# % Infection rate
LT_guess = 5# % latent time in days
Q_guess = 0.1# % rate at which infectious people enter in quarantine
lambda_guess = c(0.01,0.001,10)# % recovery rate
kappa_guess = c(0.001,0.001,10)# % death rate
guess = c(alpha_guess,
beta_guess,
1/LT_guess,
Q_guess,
lambda_guess,
kappa_guess)
# Initial conditions
Q0 = confirmed[1]-recovered[1]-deaths[1]#
I0 = 0.3*Q0# % Initial number of infectious cases. Unknown but unlikely to be zero.
E0 = 0.3*Q0# % Initial number of exposed cases. Unknown but unlikely to be zero.
R0 = recovered[1]#
D0 = deaths[1]#
Active = confirmed-recovered-deaths
Active[Active<0] <- 0 # No negative number possible
Q=Active
R=recovered
D = deaths
time = seq(as.Date(start, format = "%m/%d/%y"), as.Date(finish, format = "%m/%d/%y"), by = "1 day")
## parameter estimations
params = fit_SEIQRDP(Q = Active, R = recovered, D = deaths,Npop = Npop, E0 = E0,I0 = I0,
time = time, guess = guess, ftol = 1e-6,
ptol = 1e-6, gtol = 1e-6, epsfcn = 0.001, factor = 100, maxfev = 1000,
maxiter = 100, nprint = 1, trace = T)
## SEIR results
res = SEIQRDP(alpha=params$alpha1, beta=params$beta1,
gamma=params$gamma1, delta=params$delta1,
lambda0=params$Lambda1, kappa0 = params$Kappa1,
Npop,E0,I0,Q0,R0,D0,lambdaFun=params$lambdaFun,
kappaFun=params$kappaFun,tstart = start, tfinish = finish,
dt = dt, f=f)
## SEIR plot
p = plotSEIQRDP(res, Active, recovered, deaths, name[i], params, checkRates = T)
print(p)
}
?mean
?genSEIR::checkRates
library(tidyr)
?world_bank_pop
head(world_bank_pop)
world_bank_pop$country
29/30
11/30
29/49
11/12
29+111
29+11
40/60
library(genSEIR)
?nlsr::nlsr
cite("shiny")
cite("MVN")
citation("MVN")
citation("shiny")
citation("DT")
citation("dplyr")
citation("MVN")
citation("highcharter")
install.packages("highcharter")
citation("highcharter")
